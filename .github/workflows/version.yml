on:
  workflow_dispatch:
    inputs:
      type:
        description: The type of version bump
        required: true
        type: choice
        options:
          - major
          - minor
          - patch

concurrency: ci-versioning

jobs:
  version:
    name: Version and release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Get all tags
          fetch-depth: 0
      - id: state
        run: |
          tags=$(git tag)
          echo "tags: $tags"
          last_ver=$(git tag | grep '\.' | sort -V | tail -n 1 | xargs)
          echo "last_ver: $last_ver"

          if [ -z "$last_ver" ]; then
          	last_ver="v0.0.0"
          fi

          echo "::set-output name=last_ver::$last_ver"
      - id: bump
        run: |
          RE='[^0-9]*\([0-9]*\)[.]\([0-9]*\)[.]\([0-9]*\)\([0-9A-Za-z-]*\)'
          BASE='${{ steps.state.outputs.last_ver }}'
          MAJOR=`echo $BASE | sed -e "s#$RE#\1#"`
          MINOR=`echo $BASE | sed -e "s#$RE#\2#"`
          PATCH=`echo $BASE | sed -e "s#$RE#\3#"`

          case "${{ inputs.type }}" in
            major)
              let MAJOR+=1
          		MINOR=0
          		PATCH=0
              ;;
            minor)
              let MINOR+=1
          		PATCH=0
              ;;
            patch)
              let PATCH+=1
              ;;
          esac

          echo "::set-output name=new_ver::v$MAJOR.$MINOR.$PATCH"
          echo "::set-output name=new_major_ver::v$MAJOR"
      - uses: ncipollo/release-action@v1
        with:
          generateReleaseNotes: true
          tag: ${{ steps.bump.outputs.new_ver }}
        # Also always create or update the major version
      - uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.bump.outputs.new_major_ver}}
          allowUpdates: true
